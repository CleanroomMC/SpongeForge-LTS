/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.mixin.exploit;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.network.NetHandlerPlayServer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketChatMessage;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.common.text.chat.ChatUtil;

@Mixin(NetHandlerPlayServer.class)
public abstract class NetHandlerPlayServerMixin_JNDIChatMessageBlock {

    // There is a vulnerability in log4j that can be exploited via jndi.
    // We block any incoming message that contains the start of the jndi
    // token to try to prevent any vulnerabilities hitting the client.
    @Redirect(method = "processChatMessage", at = @At(value = "INVOKE",
            target = "Lnet/minecraft/entity/player/EntityPlayerMP;getChatVisibility()" +
                    "Lnet/minecraft/entity/player/EntityPlayer$EnumChatVisibility;"))
    private EntityPlayer.EnumChatVisibility exploit$blockAttemptedJDNIExploit(
            final EntityPlayerMP player,
            final CPacketChatMessage packetIn) {
        return this.exploit$checkMessage(player, packetIn.getMessage());
    }

    @Redirect(method = "sendPacket", at = @At(value = "INVOKE",
            target = "Lnet/minecraft/entity/player/EntityPlayerMP;getChatVisibility()Lnet/minecraft/entity/player/EntityPlayer$EnumChatVisibility;"))
    private EntityPlayer.EnumChatVisibility exploit$preventExploitMessageFromBeingSent(
            final EntityPlayerMP player,
            final Packet<?> packetIn) {
        // We block here in case someone tries to send a message directly and
        // the plugin doesn't account for it.
        return this.exploit$checkMessage(
                player,
                ((SPacketChatAccessor_JNDIChatMessageBlock) packetIn).exploitAccessor$chatComponent().getUnformattedText());
    }

    private EntityPlayer.EnumChatVisibility exploit$checkMessage(final EntityPlayerMP player, final String message) {
        if (ChatUtil.isExploitable(message)) {
            // block the message because we know it could cause problems.
            // this just tells the client the message could not be sent.
            return EntityPlayer.EnumChatVisibility.HIDDEN;
        }

        return player.getChatVisibility();
    }

}
