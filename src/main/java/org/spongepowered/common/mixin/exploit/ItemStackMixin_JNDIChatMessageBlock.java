/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.mixin.exploit;

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import org.spongepowered.common.text.chat.ChatUtil;

@Mixin(ItemStack.class)
public abstract class ItemStackMixin_JNDIChatMessageBlock {

    @Redirect(method = "getDisplayName", at = @At(value = "INVOKE", target = "Lnet/minecraft/nbt/NBTTagCompound;hasKey(Ljava/lang/String;I)Z"))
    private boolean exploit$ignoreExploitableItemNames(final NBTTagCompound instance, final String key, final int type) {
        return instance.hasKey(key, type) && type == 8 && !ChatUtil.isExploitable(instance.getString(key));
    }

    @Inject(method = "setStackDisplayName", at = @At("HEAD"), cancellable = true)
    private void exploit$ignoreExploitableItemNamesOnSetName(
            final String displayName, final CallbackInfoReturnable<ItemStack> cir) {
        if (ChatUtil.isExploitable(displayName)) {
            cir.setReturnValue((ItemStack) (Object) this);
        }
    }

    @Inject(method = "setTranslatableName", at = @At("HEAD"), cancellable = true)
    private void exploit$ignoreExploitableItemNamesOnSetTranslatableName(
            final String translatableName, final CallbackInfoReturnable<ItemStack> cir) {
        // just in case
        if (ChatUtil.isExploitable(translatableName)) {
            cir.setReturnValue((ItemStack) (Object) this);
        }
    }

}
