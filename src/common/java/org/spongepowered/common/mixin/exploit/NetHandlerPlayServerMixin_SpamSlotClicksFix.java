/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.mixin.exploit;

import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.network.NetHandlerPlayServer;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.util.text.TextComponentString;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.common.SpongeImpl;
import org.spongepowered.common.config.category.ExploitCategory;

@Mixin(value = NetHandlerPlayServer.class, priority = 1100)
public abstract class NetHandlerPlayServerMixin_SpamSlotClicksFix {

    // @formatter:off
    @Shadow public EntityPlayerMP player;
    // @formatter:on

    private int spamSlotClickFix$count = 0;

    @Inject(
        method = "processClickWindow",
        at = @At(
            value = "INVOKE",
            target = "Lnet/minecraft/entity/player/EntityPlayerMP;markPlayerActive()V"
        ),
        cancellable = true
    )
    private void exploit$preventSlotSpamClick(final CPacketClickWindow packet, final CallbackInfo ci) {
        final ExploitCategory exploitsCategory = SpongeImpl.getGlobalConfigAdapter().getConfig().getExploits();
        final int count = this.spamSlotClickFix$count++;
        if (count > exploitsCategory.slotClicksBeforeKick()) {
            this.player.connection.disconnect(new TextComponentString("Spam slot clicks!"));
            SpongeImpl.getLogger()
                .warn(
                    "Player '{}' is attempting to spam slot click packets. Size sent: {}, size allowed: {}!",
                    count,
                    player.getName(),
                    exploitsCategory.slotClicksBeforeKick()
                );
            ci.cancel();
        }
    }

    @Inject(method = "processCreativeInventoryAction",
        at = @At(
            value = "INVOKE",
            target = "Lnet/minecraft/server/management/PlayerInteractionManager;isCreative()Z"
        ),
        cancellable = true
    )
    private void exploit$checkSpamInventoryPackets(final CallbackInfo ci) {
        final ExploitCategory exploitsCategory = SpongeImpl.getGlobalConfigAdapter().getConfig().getExploits();
        final int count = this.spamSlotClickFix$count++;
        if (count > exploitsCategory.slotClicksBeforeKick()) {
            this.player.connection.disconnect(new TextComponentString("Spam slot clicks!"));
            SpongeImpl.getLogger()
                .warn(
                    "Player '{}' is attempting to spam slot click packets. Size sent: {}, size allowed: {}!",
                    count,
                    player.getName(),
                    exploitsCategory.slotClicksBeforeKick()
                );
            ci.cancel();
        }
    }

    @Inject(method = "update", at = @At("HEAD"))
    private void exploit$resetSlotSpamCount(final CallbackInfo ci) {
        this.spamSlotClickFix$count = 0;
    }
}
