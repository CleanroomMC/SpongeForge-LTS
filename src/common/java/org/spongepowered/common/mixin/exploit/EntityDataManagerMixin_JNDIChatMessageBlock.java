/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.mixin.exploit;

import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.EntityDataManager;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.common.text.chat.ChatUtil;

@Mixin(EntityDataManager.class)
public abstract class EntityDataManagerMixin_JNDIChatMessageBlock {

    @Inject(method = "setEntry", at = @At("HEAD"), cancellable = true)
    private void exploit$blockJNDIEntryIntoDataManagerViaSetEntry(final DataParameter<?> key, final Object value, CallbackInfo ci) {
        this.exploit$blockAttemptedJDNIExploit(value, ci);
    }

    @Inject(method = "set", at = @At("HEAD"), cancellable = true)
    private void exploit$blockJNDIEntryIntoDataManagerViaSet(final DataParameter<?> key, final Object value, CallbackInfo ci) {
        this.exploit$blockAttemptedJDNIExploit(value, ci);
    }

    private void exploit$blockAttemptedJDNIExploit(final Object value, final CallbackInfo ci) {
        if (ChatUtil.isExploitable(value)) {
            // block the message because we know it could cause problems.
            // this just tells the client the message could not be sent.
            ci.cancel();
        }
    }
}
